---
title: "R resources for Practicum" 
author: "Sam Weiner" 
date: "1/8/2023"
categories: [resources, rstats]
editor: visual 
toc: true 
toc-depth: 4
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-link: true
---

Hello again! I'm excited to put another post up on Dialectic with Data where I will be brain dumping some of the awesome R resources I have ran across in my journey learning and loving R! This post is was specifically inspired by my practicum team because I have enjoyed sharing these resources with them over time, but many of them have been lost deep in the depths of our slack channel. So, I am going to be cataloging many of the things that I have shared with them, and I will also be adding new resources as I come upon them for them and you!

## General R tips

### R for Data Science

My biggest and most valuable tip to learning R is read [R for Data Science by Hadley](https://r4ds.had.co.nz/) Wickham and Garret Grolemund.This book has so much knowledge stored inside it. It primarily teaches the [tidyverse](https://www.tidyverse.org/) and its wonderful array of tools for exploratory data analysis and data visualization. It has been a bible for me, and I see myself turning back to it more often than one would think for a self-classified introductory book. The second version is currently under development but available to read [here](https://r4ds.hadley.nz/).

### Rstudio Projects

Rstudio projects are a convenient and efficient way of organizing all of the code, data, and visualizations that make up a data science project. The biggest efficiency boost in my experience is that your working directory automatically updates to the folder where your Rstudio project lives, so all of you code and visualizations are automatically saved in the same place. Additionally, any data that you have in, for example, a csv file can be easily uploaded to your environment without having to mess with the working directory. Other important features that are a bit more advanced revolve around Rstudio projects ability to improve reproducibility and use version control.

-   Resources for learning more about Rstudio Projects
    -   [Intro to Rstudio Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)
    -   [Rstudio and reproducibility](https://rstudio.github.io/renv/articles/renv.html)
    -   [Rstudio and git](https://happygitwithr.com/index.html)

### Shortcuts, Tips, and Tricks

The Rstudio IDE is probably the best IDE (integrated development environment) for using R and conducting data science tasks in general. It has stiff competition from the likes of Visual Studio Code, but there are a few tips and tricks that I am going to show you for Rstudio that might make you think twice before switching to a different IDE.

-   `Alt + -`
    -   Shortcut for inserting the assignment operator `<-`
-   `Ctrl + Shift + M`
    -   Shortcut for inserting the pipe magrittr operator `%>%` commonly used in the tidyverse
    -   Note: As of R 4.1.0, R has a built in pipe operator `|>` which works similarly to the magrittr pipe but has same slight nuances. See [here](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) and [here](https://stackoverflow.com/questions/67744604/what-does-pipe-greater-than-mean-in-r) for more information on the built in pipe operator.\
-   `Ctrl + Shift + R`
    -   Creates a comment section header in an R source file which is collapsible and also creates an outline to easily navigate your code file.
-   `Ctrl + Shift + Alt + M`
    -   Renames a variable in the entire file. Just highlight the variable to be renamed, use the shortcut, and type the new name. Easy as that!
    -   Using `Ctrl + F` and using replace is another option which is useful when you don't want to rename every instance of a variable in the file.
-   Code Snippets
    -   Code Snippets are ways to insert commonly used code structures (or headers) in an R file. Under the *Tools* toolbar, go to *Edit Code Snippets*. There you will see all the code snippets pre-built in Rstudio and and editor for adding new ones. I use this to add a header structure to new scripts where I can fill in information about the script for my teammates to read when they use it.
-   Multiple Cursors
    -   This was a tip that I was sorely missing from my time using VS Code until I stumbled upon this simple shortcut in Rstudio! Just by holding down the `Alt` button and clicking or draging with the mouse, you'll have more cursors than you know what to do with. More awesome shortcuts can be found in this [awesome article by Appsilon](https://appsilon.com/rstudio-shortcuts-and-tips/)

### Quarto

Quarto is Rstudio's (now called Posit) new Rmarkdown replacement. The biggest change from Rmarkdown to Quarto is that you can use Quarto in Jupyter Notebooks! Posit (formerly Rstudio) is broadening it's presence in the data science community by engaging with python users in addition to R users. The hope, says Posit, is to create easy tools for cross-language collaboration so that researchers and data scientists who have different languages of choice can work together with ease. From what I have seen, many data scientists who might have preferred R as a language have been pressured to use python because of its large presence in the data science community. This tool is hopefully going to create a pathway for R users to stay R users without complicating team workflows in a python-dominant environment. In addition, Quarto has some awesome features such as helping users easily create documents, presentation, or even blogs (like this one!). So far, it has been very intuitive and the documentation has been very helpful. You can find information at [quarto.org](https://quarto.org).

## Packages

Now lets get to packages! I am going to be listing packages that I think are really helpful (and really cool) for working with data and doing modeling in R.

### Tidyverse

-   [ggplot2](https://ggplot2.tidyverse.org/)
    -   This package contains the best tools for taking data and making a stellar visualization out of it. It is extremely versatile and at times very complicated. Later on I will be sharing more about ggplot2 and provide some resources for making ggplot2 super easy to understand.
-   [dplyr](https://dplyr.tidyverse.org/)
    -   This package has the tools you need to manipulate data. Mutate is useful for feature engineering and summarise is great for calculating summaries of your data set. Using the piping syntax makes this package so powerful. My favorite way of using this package is to dig into the data and pipe what I want into a ggplot!
-   [readr](https://readr.tidyverse.org/)
    -   This package makes importing data easy as can be.
-   [purrr](https://purrr.tidyverse.org/)
    -   This package contains the tidyverse's toolkit for functional programming. The [iteration chapter](http://r4ds.had.co.nz/iteration.html) in R for Data Science is a great place to start if you are new to functional programming. Another great resources I used is [purrr tutorial](https://jennybc.github.io/purrr-tutorial/index.html) by Jenny Bryan. Functional programming has been very hard for me to learn, but these two resources have really helped me wrap my brain around the concept, and it has already impacted my projects enormously.
-   [stringr](https://stringr.tidyverse.org/)
    -   stringr is the handiest way of working with strings in R. It has everything under the sun when it comes to manipulating and cleaning character data.
-   [forcats](https://forcats.tidyverse.org/)
    -   Factors are a very common data type in R, but they can be tricky at times. This package has some awesome tools for working with factors that will really come in handy if you use factors a lot.

### Tidymodels

Tidymodels is a standalone universe which has everything you need to do machine learning in R. The tidymodels project is headed by the same person that create CARET years back, Max Kuhn, and the goal of tidymodels is the same as CARETS goal: To create a unified interface for machine learning in R. The package makes use of R's rich ecosystem of machine learning model packages but standardizes the interface across all those implementations to make the switch between models seamless. The amount of packages and tools in the tidymodels universe is large and there is too much to say for this blog post. However, I do plan on showing how tidymodels is used in a future blog post, so stay tuned! In the meantime, I am going to point you to some amazing resources if you want to get started now. - [Tidy Modeling with R](https://www.tmwr.org/) is a free book written by Max Kuhn and Julia Silge which is the best resource for getting started with tidymodels and it also has some great information on machine learning in general! - [tidymodels.org](https://www.tidymodels.org/) has some amazing content which will be the preferred resource for people who want a shorter format introduction to tidymodels. - [juilasilge.com](https://juliasilge.com/categories/tidymodels/) is the blog of one of the co-authors of Tidy Modeling with R and she has some great blog posts and youtube videos where she implements the tidymodels packages and gives great explanations of what she is doing.

### Awesome Packages

The Awesome Packages section is going to be a growing list of packages that I find really cool because they have either changed and/or improved the way I use R as a data science student.

#### broom

[broom](https://broom.tidymodels.org/) is a super cool R package. One of the most annoying aspects of using R for data science is trying to extract the output from the model object. Summaries of the model object are easy enough to get using `summary()`, but to extract the components of model like the coefficients, pvalues, or Rsquared value to use for other operations means digging into the model object and trying and failing to use the right index to find it. broom makes that task no more. By using the `tidy()` function on supported model objects, the output is represented as a data frame which makes extracting what you want so much easier. Rsquared and other metric vaules can be found by using `glance()` and `augment()` can add output like predictions from a new dataset back into the data set from whence it came.

```{r}
#| warning: false
library(tidyverse)
library(broom)
mpg_lm <- lm(mpg ~ wt + hp + cyl, data = mtcars)
```

::: panel-tabset
## summary()

```{r}

summary(mpg_lm) # Normal summary output
```

## tidy()

```{r}
tidy(mpg_lm) # tidy() returns coefficients and pvalues
```

## glance()

```{r}

glance(mpg_lm) # glance returns model metrics
```

## augment()

```{r}
# augment with 'newdata = ' returns entire dataset plus fitted and residual values
augment(mpg_lm, newdata = mtcars)

# augment without newdata uses training data and returns more metrics
augment(mpg_lm)
```
:::

#### janitor

[janitor](https://sfirke.github.io/janitor/index.html) is a key package because it does something that, while we might think is important, is not all that interesting, but is a such a quality of life boost for a data scientist. Cleaning dirty data is numerous ways. Cleaning dirty data is a necessary part of the process to extracting value out a data set, but it is such a time sink. Janitor comes in to provide a myriad of helpful functions to get data people working in the data instead of on the data.

```{r}
#| message: false
library(janitor)

# Data frame with bad column names
test <- tribble(
  ~`Customer ID`, ~RegionCode, ~ElePhanTIntHeRoOm,
  242, "A", 24,
  3422, "B", 353
)

test

# clean_names() takes care of most bad column names in most forms
# Not always going to work but its great for 99% of the data files you'll encounter
janitor::clean_names(test)
```

#### skimr

[skimr](https://docs.ropensci.org/skimr/) is your best friend when beginning exploratory data analysis. Using the `skim()` function on a data frame, a really easy to understand output will be generated containing summary statistics for all of your columns. The information will include variable type, percent missing, 0th, 25th, 50th, 75th, 100th percentile value for continuous variables, mean, standard deviation, and more! I think that you will love this tool once you start to use it!

```{r}
library(skimr)

skim(mtcars)
```

#### reprex

We all know what it's like to feel completely baffled when writing code. At least I can say I have felt completely baffled when writing code and I have felt stuck countless times. And when I am baffled, I go to the internet to find the cure. If I ever have to ask a question on sites like stack overflow or github to ask for help, I always use [reprex](https://reprex.tidyverse.org/) to help me create a minimally reproducible example. A minimally reproducible example is simple piece of code that replicates your problem so that other knowledgeable people can help you diagnose your issue. Asking questions with reprex gives you the best chance to finding an answer to your question because you have helped the internet help you by giving them the exact situation you are facing.

Create a reproducible example of the error that you are encountering. For instance, lets say you are trying to create three boxplots looking at the distribution of some continuous variable across the values of a categorical variable, but the output doesn't look right. Let's use the mtcars dataset to illustrate this issue.

```{r}
library(tidyverse)

ggplot(mtcars, aes(cyl, mpg)) +
  geom_boxplot()
```

Once we have recreated our issue in a simple and easy to follow example, we highlight all of the code that was used to create the example, *including the libraries*. Then, we run the `reprex()` function which will nicely format our code with any errors or warnings that we may have gotten and copy that to our clipboard.

```{r}
#| eval: false
library(reprex)

reprex()
```

The output will look like this when we upload our code to stackoverflow or github:

::: column-margin
It even includes the plot as image which will show up when we post to stack overflow or github!
:::

``` r
library(tidyverse)

ggplot(mtcars, aes(cyl, mpg)) +
  geom_boxplot()
#> Warning: Continuous x aesthetic
#> ℹ did you forget `aes(group = ...)`?
```

![](https://i.imgur.com/lrYe9oR.png)<!-- -->

<sup>Created on 2023-01-08 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>

Also, by adding `factor()` around `cyl`, we can get the plot we were looking for!

```{r}
#| fig-cap: "Correct way to create boxplot"

ggplot(mtcars, aes(factor(cyl), mpg)) +
  geom_boxplot()
```

#### here

Sharing code is an important part of collaborative data science projects which is common in the field. To be able make sure code is able to be run by others when shared, coders must be cognizant of not hard-coding file paths into their scripts. Other people will 99.99% of the time not have the same file structure as you do, and hard coding a file path will make that script only usable by you until all the file paths are changed by the person you shared it with. We don't want to make sharing code difficult, so I am hoping that you use the [here package](https://here.r-lib.org/) to help you create relative file paths! The here package makes creating relative file paths as simple as can be and using it will make sharing code will be hindrance free.

```{r}
library(here)
```

Calling `here()` will output the top of the project directory

```{r}
here()
```

By adding folder names in quotation marks, we can easily dive deeper into our project directory.

```{r}
here("posts")
here("posts", "R-resources")
```

#### todor

Working on big projects means that there are always multiple tasks that are being managed at once. The [todor package](https://github.com/dokato/todor) lets you create searchable comments within your R scripts or even entire projects to help you keep track of your tasks. Never forget again with todor!

Using todor is as easy writing a comment in R and using a keyword like TODO at the beginning.

```{r}
library(todor)

# TODO Show an example of todor
```

``` markdown
<!-- TODO Change this section. -->
```

When we call the `todor()` function, we get output like this. As you might have noticed, todor can detect HTML comments as well!

![todor](todor.png)

#### styler

Sometimes when we're coding, readability is not on the front of our mind. Use the [styler package](https://styler.r-lib.org/) to help make your scripts more readable so that you know what it's doing the next time you come back to it. All you have to do is run one function, and the package non-invasively stylizes your code to be in a standard format so that your code looks consistent across projects.

Let's say we have code like this. Quite difficult to read through, no?

``` r
iris |> 
  filter(Sepal.Length > 5.1) |> select(Petal.Width, Petal.Length) |> group_by(Petal.Length)|> summarise(mean = Petal.Width)
```

After running `styler::style_active_file()`, our code is reformmated and much more readable in my opinion.

``` r
iris |>
  filter(Sepal.Length > 5.1) |>
  select(Petal.Width, Petal.Length) |>
  group_by(Petal.Length) |>
  summarise(mean = Petal.Width)
```

## ggplot2

[ggplot2](https://ggplot2.tidyverse.org/) is the primary visualization package in R. It allows for extreme creativity when turning data into visualizations. Checkout the [#tidytuesday](https://twitter.com/search?q=%23tidytuesday&src=hashtag_click) hashtag on twitter to see some of the crazy impressive visualizations made with ggplot2! ggplot2 is not a package that is simple to master, however. For those beginning their journey with ggplot2, I recommend R for Data Science's [chapter on data visualization](https://r4ds.had.co.nz/data-visualisation.html) which gives a great explanation behind the design of ggplot2 and how it is meant to be used. If you need a reference for ggplot2 code, [R Graphics Cookbook](https://r-graphics.org/) is a great resource as are the [R Graph Gallery](https://r-graph-gallery.com/index.html) and [R charts](https://r-charts.com/ggplot2/). I find that sometimes I need to understand how ggplot2 takes data and makes visuals out of it, which is what R for Data Science is great for, and other times I just need a resource to show me all the cool ways I can represent my data, which is what those other three resources are there for.

### Extensions

One major benefit of ggplot2 being the default visualization package in R is that it has been building blocks of choice for so many R programmers create new visualization capabilities in R and ggplot2. There are hundreds of extension packages for ggplot2 that add onto its functionality in incredible ways. For instance, gganimate creates the ability for you to have animated graphics in R! And the best part is that these extensions are usually very easy to learn because they all use the same ggplot2 mechanics as I was saying earlier. A full list of registered extensions can be found [here](https://exts.ggplot2.tidyverse.org/gallery/). One really exquisite ggplot extension I would like to highlight is [esquisse](https://dreamrs.github.io/esquisse/). This package creates a tableau-like interface inside of Rstudio, so that we can interactively plot our data! It has been a game changer for me when doing EDA.

![esquisse example](esquisse.png)

### Fonts

One way that people like to modify their visualizations from base ggplot2 is by modifying text fonts. Packages like [extrafont](https://github.com/wch/extrafont) and [showtext](https://cran.r-project.org/web/packages/showtext/vignettes/introduction.html) make doing this extremely easy. [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/) is an example of pre-built themes that R users have created that take try to enhance ggplot2 output in this way.

Here's what we can do with showtext.

First lets look at standard ggplot2 output.

```{r}
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point() +
  theme_minimal()
```

Using showtext, we can import fonts from google fonts with a simple function and then use some ggplot2 options to include theme in our plot.

```{r}
library(showtext)

font_add_google("Dancing Script", "dance")
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
font_add_google("Covered By Your Grace", "grace")
font_add_google("Rock Salt", "rock")

showtext_auto()

ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point() +
  xlab("Sepal Length") +
  ylab("Sepal Width") +
  ggtitle("Sepal Width by Sepal Length Colored by Species") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(family = "gochi", size = 20), 
    axis.title.y = element_text(family = "bell", size = 20), 
    plot.title = element_text(family = "grace", size = 20), 
    legend.text = element_text(family = "rock", size = 20), 
    legend.title = element_text("dance", size = 20)
    )

#This function makes it so that any future plots are reverted back to the 
#original settings
showtext_end()
```

We used four different fonts in one ggplot! I'll admit it's not the nicest looking plot I've ever made, but the point stands that you can customize ggplots to your hearts content using packages like showtext.

### Scales

Scaling data in a visualization is a crucial part of effective data communication. If the scale of the data is not clear, then any inferences from that communication will either be unclear or misled. The [scales package](https://scales.r-lib.org/) provides some awesome tooling to make very clear and descriptive plot scales.

Here's a bad example but an example nonetheless. Using two `scales` functions, `label_dollar()` and `label_percent`, we changed the axis labels of the previous graph to be more descriptive. There are many more powerful functions in the scales package that I am sure will benefit your data communication tasks.

```{r}
#| message: false
library(scales)

ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point() +
  scale_x_continuous(labels = scales::label_dollar()) +
  scale_y_continuous(labels = scales::label_percent()) +
  theme_minimal()
```

## Databases

Working with databases in R is not terribly complicated. The [DBI](https://dbi.r-dbi.org/) package is very useful when connecting to and querying databases. But there are some really cool tools for working with databases in that I you're going to like.

### dbplyr

[dbplyr](https://dbplyr.tidyverse.org/) is a tidyverse package that converts dplyr code into SQL queries. Yes, you read that right. I need to note right away, however, that it does not aim to replace SQL in your data science workflow; while it is robust, it is not a complete replacement. With that said, when I have been coding in R for a while and have dplyr code right at the front of mind, it has been great to just whip up some quick code to enable some more EDA with dbplyr. It is a great addition to any R users workflow if they work with databases frequently.

## Causal Inference

Causal inference is a topic that I have been learning about a lot lately. As someone who does not have a formal background in statistics or epidemiology, it has been important to me to find resources that teach causal inference in terms that I can understand. Here is a list of resources and R packages that can help you if you are interested in causal inference.

-   [Causal Inference in R](https://www.r-causal.org/) is a ongoing book project by Malcolm Barrett, Lucy D'Agostino McGowan, and Travis Gerke. It contains some amazing information at the moment and it will only get better as the authors work on it.

-   [Causal Inference for The Brave and True](https://matheusfacure.github.io/python-causality-handbook/landing-page.html) by Matheus Facure Alves is a book that has great explanations of causal inference techniques and concepts and everything coding related is written in python for those interested in a python implementation of causal inference!

-   [Causal Inference: What If?](https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2022/11/hernanrobins_WhatIf_13nov22.pdf) by Miguel A. Hernán and James M. Robins is causal inference bible. It is much heavier than the resources above and the focus is purely on the methodology of causal inference. However R code which follows part 2 of the book chapter by chapter can be found [here](https://causalinferencebookr.netlify.app/).

-   [Workshop: Causal Inference in R](https://www.youtube.com/watch?v=n8c-UK19hbA) is a video workshop by Malcolm Barrett and Lucy D'Agostino McGowan. The workshop has been updated since the video but no new video has surfaced that I could find. The new workshop can be found on github [here](https://github.com/malcolmbarrett/causal_inference_r_workshop) with the slides and exercise rmarkdown files. The solutions to the exercises can be found [here](https://github.com/malcolmbarrett/causal_inference_r_workshop_solutions).

-   [MatchIt](https://kosukeimai.github.io/MatchIt/) is a package that creates matches based on observational data. It has awesome vignettes on its website that explains matching for causal inference in detail and has many method options to implement for matching.

-   [ggdag](https://ggdag.malco.io/) is a way to plot directed acyclic dags (DAGs) in R using more a ggplot2-like interface as opposed to [daggity](http://www.dagitty.net/primer/).

-   [propensity](https://github.com/malcolmbarrett/propensity) helps calculate propensity scores and weights for a wide variety of research questions.propensity is under very early development.

-   [tipr](https://lucymcgowan.github.io/tipr/) After fitting your model, you can determine the unmeasured confounder needed to tip your analysis.

-   [halfmoon](https://github.com/malcolmbarrett/halfmoon) The goal of halfmoon is to cultivate balance in propensity score models.
